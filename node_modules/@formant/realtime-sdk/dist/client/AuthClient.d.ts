import { FormantBaseClient } from "../common/FormantBaseClient";
import { Feature } from "../model/Feature";
import { IAdminSignupRequest } from "../model/IAdminSignupRequest";
import { ICreateServiceAccountResponse } from "../model/ICreateServiceAccountResponse";
import { IDeviceCredentials } from "../model/IDeviceCredentials";
import { IGoogleLoginRequest } from "../model/IGoogleLoginRequest";
import { ILoginRequest } from "../model/ILoginRequest";
import { ILoginResult } from "../model/ILoginResult";
import { IUser } from "../model/IUser";
import { Uuid } from "../model/Uuid";
export declare class AuthClient extends FormantBaseClient {
    adminSignup(props: IAdminSignupRequest, token?: string): Promise<IUser>;
    login(credentials: ILoginRequest): Promise<ILoginResult>;
    loginWithGoogleToken(credentials: IGoogleLoginRequest): Promise<ILoginResult>;
    refresh(refreshToken: string, tokenExpirationSeconds?: number): Promise<ILoginResult>;
    respondToNewPasswordRequiredChallenge(props: {
        userId: Uuid;
        session: string;
        newPassword: string;
    }): Promise<ILoginResult>;
    forgotPassword(email: string): Promise<void>;
    confirmForgotPassword(props: {
        email: string;
        confirmationCode: string;
        newPassword: string;
    }): Promise<void>;
    resendInvitation(email: string): Promise<void>;
    changePassword({ token, refreshToken, currentPassword, newPassword }: {
        token: string;
        refreshToken: string;
        currentPassword: string;
        newPassword: string;
    }): Promise<void>;
    getDeviceCredentials(token: string): Promise<IDeviceCredentials>;
    impersonate(token: string, userId: Uuid): Promise<ILoginResult>;
    createServiceAccount(token: string, name: string, roleId: Uuid): Promise<ICreateServiceAccountResponse>;
    getFeatures(token: string): Promise<Feature[]>;
}
