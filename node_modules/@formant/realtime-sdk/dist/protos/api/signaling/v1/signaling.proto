syntax = "proto3";

package v1.signaling.api;

import "google/protobuf/wrappers.proto";
option go_package = "github.com/FormantIO/genproto/go/v1/api/signaling";

service Signaling {
    rpc CreatePeer(CreatePeerRequest)
        returns (CreatePeerResponse) {}
    rpc DeletePeer(DeletePeerRequest)
        returns (DeletePeerResponse) {}
    rpc RefreshPeer(RefreshPeerRequest)
        returns (RefreshPeerResponse) {}
    rpc GetPeers(GetPeersRequest)
        returns (GetPeersResponse) {}
    rpc GetIceServers(GetIceServersRequest)
        returns (GetIceServersResponse) {}
    rpc SendSignal(SendSignalRequest)
        returns (SendSignalResponse) {}
    rpc ReceiveSignalStream(ReceiveSignalStreamRequest)
        returns (stream ReceiveSignalStreamResponse) {}
}

message Peer {
    string peer_id = 1;
    string organization_id = 2;
    google.protobuf.StringValue user_id = 3;
    google.protobuf.StringValue device_id = 4;
    repeated string session_ids = 5;
    google.protobuf.Int64Value peer_created_timestamp = 6; // No value means it's for a new peer
}

enum SessionType {
    UNKNOWN = 0;
    TELEOP = 1;
    PORT_FORWARD = 2;
}

message Signal {
    google.protobuf.StringValue session_id = 1; // No value means it's for a new session
    google.protobuf.Int64Value session_created_timestamp = 2; // No value means it's for a new session
    string sender_id = 3;
    string receiver_id = 4;
    string payload = 5;
    string ice_servers = 6; // JSON-encoded RTCIceServer list
    string ice_transport_policy = 7;
    SessionType session_type = 8;
}

message CreatePeerRequest {}
message CreatePeerResponse {
    Peer peer = 1;
}

message DeletePeerRequest {
    string peer_id = 1;
}
message DeletePeerResponse {}

message RefreshPeerRequest {
    Peer peer = 1;
}
message RefreshPeerResponse {}

message GetPeersRequest {}
message GetPeersResponse {
    repeated Peer peers = 1;
}

message GetIceServersRequest {}
message GetIceServersResponse {
    string ice_servers = 1; // JSON-encoded RTCIceServer list
}

message SendSignalRequest {
    Signal signal = 1;
}
message SendSignalResponse {
    google.protobuf.StringValue session_id = 1;
    google.protobuf.Int64Value session_created_timestamp = 2;
}

message ReceiveSignalStreamRequest {
    string peer_id = 1;
}
message ReceiveSignalStreamResponse {
    Signal signal = 1;
}