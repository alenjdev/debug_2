/**
 * @fileoverview gRPC-Web generated client stub for v1.signaling.api
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js')
const proto = {};
proto.v1 = {};
proto.v1.signaling = {};
proto.v1.signaling.api = require('./signaling_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.v1.signaling.api.SignalingClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.v1.signaling.api.SignalingPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.CreatePeerRequest,
 *   !proto.v1.signaling.api.CreatePeerResponse>}
 */
const methodDescriptor_Signaling_CreatePeer = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/CreatePeer',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.CreatePeerRequest,
  proto.v1.signaling.api.CreatePeerResponse,
  /**
   * @param {!proto.v1.signaling.api.CreatePeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.CreatePeerResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.CreatePeerRequest,
 *   !proto.v1.signaling.api.CreatePeerResponse>}
 */
const methodInfo_Signaling_CreatePeer = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.CreatePeerResponse,
  /**
   * @param {!proto.v1.signaling.api.CreatePeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.CreatePeerResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.CreatePeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.CreatePeerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.CreatePeerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.createPeer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/CreatePeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_CreatePeer,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.CreatePeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.CreatePeerResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.createPeer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/CreatePeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_CreatePeer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.DeletePeerRequest,
 *   !proto.v1.signaling.api.DeletePeerResponse>}
 */
const methodDescriptor_Signaling_DeletePeer = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/DeletePeer',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.DeletePeerRequest,
  proto.v1.signaling.api.DeletePeerResponse,
  /**
   * @param {!proto.v1.signaling.api.DeletePeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.DeletePeerResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.DeletePeerRequest,
 *   !proto.v1.signaling.api.DeletePeerResponse>}
 */
const methodInfo_Signaling_DeletePeer = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.DeletePeerResponse,
  /**
   * @param {!proto.v1.signaling.api.DeletePeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.DeletePeerResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.DeletePeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.DeletePeerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.DeletePeerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.deletePeer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/DeletePeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_DeletePeer,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.DeletePeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.DeletePeerResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.deletePeer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/DeletePeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_DeletePeer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.RefreshPeerRequest,
 *   !proto.v1.signaling.api.RefreshPeerResponse>}
 */
const methodDescriptor_Signaling_RefreshPeer = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/RefreshPeer',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.RefreshPeerRequest,
  proto.v1.signaling.api.RefreshPeerResponse,
  /**
   * @param {!proto.v1.signaling.api.RefreshPeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.RefreshPeerResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.RefreshPeerRequest,
 *   !proto.v1.signaling.api.RefreshPeerResponse>}
 */
const methodInfo_Signaling_RefreshPeer = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.RefreshPeerResponse,
  /**
   * @param {!proto.v1.signaling.api.RefreshPeerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.RefreshPeerResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.RefreshPeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.RefreshPeerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.RefreshPeerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.refreshPeer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/RefreshPeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_RefreshPeer,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.RefreshPeerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.RefreshPeerResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.refreshPeer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/RefreshPeer',
      request,
      metadata || {},
      methodDescriptor_Signaling_RefreshPeer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.GetPeersRequest,
 *   !proto.v1.signaling.api.GetPeersResponse>}
 */
const methodDescriptor_Signaling_GetPeers = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/GetPeers',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.GetPeersRequest,
  proto.v1.signaling.api.GetPeersResponse,
  /**
   * @param {!proto.v1.signaling.api.GetPeersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.GetPeersResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.GetPeersRequest,
 *   !proto.v1.signaling.api.GetPeersResponse>}
 */
const methodInfo_Signaling_GetPeers = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.GetPeersResponse,
  /**
   * @param {!proto.v1.signaling.api.GetPeersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.GetPeersResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.GetPeersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.GetPeersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.GetPeersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.getPeers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/GetPeers',
      request,
      metadata || {},
      methodDescriptor_Signaling_GetPeers,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.GetPeersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.GetPeersResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.getPeers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/GetPeers',
      request,
      metadata || {},
      methodDescriptor_Signaling_GetPeers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.GetIceServersRequest,
 *   !proto.v1.signaling.api.GetIceServersResponse>}
 */
const methodDescriptor_Signaling_GetIceServers = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/GetIceServers',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.GetIceServersRequest,
  proto.v1.signaling.api.GetIceServersResponse,
  /**
   * @param {!proto.v1.signaling.api.GetIceServersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.GetIceServersResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.GetIceServersRequest,
 *   !proto.v1.signaling.api.GetIceServersResponse>}
 */
const methodInfo_Signaling_GetIceServers = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.GetIceServersResponse,
  /**
   * @param {!proto.v1.signaling.api.GetIceServersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.GetIceServersResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.GetIceServersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.GetIceServersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.GetIceServersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.getIceServers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/GetIceServers',
      request,
      metadata || {},
      methodDescriptor_Signaling_GetIceServers,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.GetIceServersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.GetIceServersResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.getIceServers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/GetIceServers',
      request,
      metadata || {},
      methodDescriptor_Signaling_GetIceServers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.SendSignalRequest,
 *   !proto.v1.signaling.api.SendSignalResponse>}
 */
const methodDescriptor_Signaling_SendSignal = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/SendSignal',
  grpc.web.MethodType.UNARY,
  proto.v1.signaling.api.SendSignalRequest,
  proto.v1.signaling.api.SendSignalResponse,
  /**
   * @param {!proto.v1.signaling.api.SendSignalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.SendSignalResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.SendSignalRequest,
 *   !proto.v1.signaling.api.SendSignalResponse>}
 */
const methodInfo_Signaling_SendSignal = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.SendSignalResponse,
  /**
   * @param {!proto.v1.signaling.api.SendSignalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.SendSignalResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.SendSignalRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.v1.signaling.api.SendSignalResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.SendSignalResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.sendSignal =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/v1.signaling.api.Signaling/SendSignal',
      request,
      metadata || {},
      methodDescriptor_Signaling_SendSignal,
      callback);
};


/**
 * @param {!proto.v1.signaling.api.SendSignalRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.v1.signaling.api.SendSignalResponse>}
 *     Promise that resolves to the response
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.sendSignal =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/v1.signaling.api.Signaling/SendSignal',
      request,
      metadata || {},
      methodDescriptor_Signaling_SendSignal);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.v1.signaling.api.ReceiveSignalStreamRequest,
 *   !proto.v1.signaling.api.ReceiveSignalStreamResponse>}
 */
const methodDescriptor_Signaling_ReceiveSignalStream = new grpc.web.MethodDescriptor(
  '/v1.signaling.api.Signaling/ReceiveSignalStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.v1.signaling.api.ReceiveSignalStreamRequest,
  proto.v1.signaling.api.ReceiveSignalStreamResponse,
  /**
   * @param {!proto.v1.signaling.api.ReceiveSignalStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.ReceiveSignalStreamResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.v1.signaling.api.ReceiveSignalStreamRequest,
 *   !proto.v1.signaling.api.ReceiveSignalStreamResponse>}
 */
const methodInfo_Signaling_ReceiveSignalStream = new grpc.web.AbstractClientBase.MethodInfo(
  proto.v1.signaling.api.ReceiveSignalStreamResponse,
  /**
   * @param {!proto.v1.signaling.api.ReceiveSignalStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.v1.signaling.api.ReceiveSignalStreamResponse.deserializeBinary
);


/**
 * @param {!proto.v1.signaling.api.ReceiveSignalStreamRequest} request The request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.ReceiveSignalStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingClient.prototype.receiveSignalStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/v1.signaling.api.Signaling/ReceiveSignalStream',
      request,
      metadata || {},
      methodDescriptor_Signaling_ReceiveSignalStream);
};


/**
 * @param {!proto.v1.signaling.api.ReceiveSignalStreamRequest} request The request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.v1.signaling.api.ReceiveSignalStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.v1.signaling.api.SignalingPromiseClient.prototype.receiveSignalStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/v1.signaling.api.Signaling/ReceiveSignalStream',
      request,
      metadata || {},
      methodDescriptor_Signaling_ReceiveSignalStream);
};


module.exports = proto.v1.signaling.api;

