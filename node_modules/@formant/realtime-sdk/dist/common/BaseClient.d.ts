import { IValidation } from "../model/IValidation";
import { ResponseError } from "./ResponseError";
export interface IRequestInit {
    method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
    headers?: {
        [key: string]: string;
    };
    body?: any;
    token?: string;
    allowUnsafeRetries?: boolean;
    json?: boolean;
}
export interface IResponse<T> {
    body: T;
    headers: Headers;
}
export declare abstract class BaseClient {
    protected endpoint: string | undefined;
    static retries: number;
    static waitForConnectivity: () => Promise<void>;
    static onResponseError: (error: ResponseError) => Promise<void>;
    private validateHeaders;
    private headers;
    private verbose;
    private retries;
    private timeoutMs?;
    constructor(endpoint: string | undefined, options?: {
        validateHeaders?: (headers: Headers) => IValidation;
        headers?: {
            [_: string]: string;
        };
        verbose?: boolean;
        retries?: number;
        timeoutMs?: number;
    });
    protected fetch<T>(path: string, extendedInit?: IRequestInit): Promise<T>;
    protected fetchVerbose<T>(path: string, extendedInit?: IRequestInit): Promise<IResponse<T>>;
    private doFetch;
}
