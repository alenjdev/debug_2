import { IStatsReporter } from "../model/IStatsReporter";
export declare class StatsManager {
    private buffer;
    private metrics;
    private reporters;
    private flushInterval;
    constructor(samplePeriodSeconds?: number);
    shutdown(): Promise<void>;
    /**
     * Aggregates a value into the IStat record at key.
     */
    aggregate(key: string, value: number): void;
    /**
     * Aggregates 1 into the IStat record at key.
     */
    increment(key: string): void;
    /**
     * Times a function call and the promise it produces.
     * The timing statistic is only recorded if the function
     * returns without an exception.
     */
    timer<T>(key: string, f: () => Promise<T>): Promise<T>;
    /**
     * Registered a function that produces a metric value.
     * The function is called on a timer to write metrics.
     */
    metric(key: string, f: () => number): void;
    /**
     * Register a reporter.
     */
    registerStatsReporter(statsReporter: IStatsReporter): void;
    /**
     * Output all stats to destinations.
     */
    private write;
    private flushStats;
}
