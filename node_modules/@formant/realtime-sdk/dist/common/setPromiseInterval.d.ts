export interface IPromiseIntervalOptions {
    func: () => Promise<void>;
    delay: number;
    immediate?: boolean;
}
export interface IShutdownPromiseInterval {
    stop(): Promise<void>;
}
/**
 * Runs callback function f periodically.
 * The next call is queued only after the
 * promise returned by f is resolved.
 *
 * Returns a function that stops execution if invoked.
 */
export declare function setPromiseInterval({ func, delay, immediate }: IPromiseIntervalOptions): IShutdownPromiseInterval;
