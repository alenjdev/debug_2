import { RtcClient } from "@formant/realtime-sdk";
import { DataChannel } from "./DataChannel";
import { CaptureStream } from "./CaptureStream";
import { Manipulator } from "./Manipulator";
import { TextRequestDataChannel, BinaryRequestDataChannel } from "./RequestDataChannel";
export interface ConfigurationDocument {
    urdfFiles: string[];
    telemetry?: {
        streams?: {
            name: string;
            disabled?: boolean;
            onDemand?: boolean;
        }[];
    };
}
export interface Command {
    id: string;
    name: string;
    command: string;
    description: string;
    parameterEnabled: true;
    parameterValue: string | null;
    parameterMeta?: {
        topic?: string;
    };
}
export interface IJointState {
    name: string[];
    position: number[];
    velocity?: number[];
    effort?: number[];
}
export interface TelemetryStream {
    name: string;
    onDemand: boolean;
}
export declare type RealtimeMessage = {
    header: {
        created: number;
        stream: {
            entityId: string;
            streamName: string;
            streamType: string;
        };
    };
    payload: any;
};
export declare type RealtimeListener = (peerId: string, message: RealtimeMessage) => void;
export declare type RealtimeVideoStream = {
    name: string;
};
export declare type RealtimeDataStream = {
    name: string;
};
export declare class Device {
    id: string;
    name: string;
    private organizationId;
    rtcClient: RtcClient | undefined;
    realtimeListeners: RealtimeListener[];
    constructor(id: string, name: string, organizationId: string);
    getLatestTelemetry(): Promise<any>;
    getConfiguration(): Promise<ConfigurationDocument>;
    getFileUrl(fileId: string): Promise<string[]>;
    private handleMessage;
    startRealtimeConnection(): Promise<void>;
    addRealtimeListener(listener: RealtimeListener): void;
    removeRealtimeListener(listener: RealtimeListener): void;
    getRealtimeVideoStreams(): Promise<RealtimeVideoStream[]>;
    getRealtimeManipulators(): Promise<Manipulator[]>;
    startListeningToRealtimeVideo(stream: RealtimeVideoStream): Promise<void>;
    stopListeningToRealtimeVideo(stream: RealtimeVideoStream): Promise<void>;
    startListeningToRealtimeDataStream(stream: RealtimeDataStream): Promise<void>;
    stopListeningToRealtimeDataStream(stream: RealtimeDataStream): Promise<void>;
    enableRealtimeTelemetryPriorityIngestion(streamName: string): Promise<void>;
    disableRealtimeTelemetryPriorityIngestion(streamName: string): Promise<void>;
    getRemotePeer(): Promise<import("@formant/realtime-sdk/dist/model/IRtcPeer").IRtcPeer>;
    stopRealtimeConnection(): Promise<void>;
    isInRealtimeSession(): Promise<boolean>;
    getAvailableCommands(): Promise<Command[]>;
    sendCommand(name: string, data?: string, time?: Date, metadata?: {}): Promise<any>;
    createCustomDataChannel(channelName: string, rtcConfig?: RTCDataChannelInit): Promise<DataChannel>;
    createCustomRequestDataChannel(channelName: string, timeout?: number): TextRequestDataChannel;
    createCustomBinaryRequestDataChannel(channelName: string, timeout?: number): BinaryRequestDataChannel;
    createCaptureStream(streamName: string): Promise<CaptureStream>;
    getTelemetry(streamNameOrStreamNames: string | string[], start: Date, end: Date, tags?: {
        [key in string]: string[];
    }): Promise<import("./Fleet").TelemetryResult[]>;
    getTelemetryStreams(): Promise<TelemetryStream[]>;
}
